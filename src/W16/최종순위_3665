import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.StringTokenizer;
import java.util.Queue;

class Main {
    static int n, m;
    static int[] input, rankingNum;
    static ArrayList<Integer>[] order;

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();

        int T = Integer.parseInt(br.readLine());
        for(int t=0; t < T; t++) {
            n = Integer.parseInt(br.readLine());
            input = new int[n];
            rankingNum = new int[n]; // 각 번호의 순위 저장할 배열
            int[] ranking = new int[n]; // 랭킹순 배치 배열
            order = new ArrayList[n]; // 내 뒤에 얼마나 있는지
            for(int i=0; i < n; i++) {
                order[i] = new ArrayList<>();
            }
    
            StringTokenizer st = new StringTokenizer(br.readLine());
            for(int i=0; i < n; i++) {
                int num = Integer.parseInt(st.nextToken()) - 1;
                ranking[i] = num;
                rankingNum[num] = i + 1;
                if(i > 0) input[num] = input[ranking[i - 1]] + 1; // 내 앞에 몇 명 있는지 저장
                for(int j=0; j < i; j++) {
                    order[ranking[j]].add(num); // 앞 순위 뒤에 저장하는 리스트에 지금 들어온 팀 넣기
                }
            }
    
            m = Integer.parseInt(br.readLine());
            for(int i=0; i < m; i++) {
                st = new StringTokenizer(br.readLine());
                int first = Integer.parseInt(st.nextToken()) - 1;
                int second = Integer.parseInt(st.nextToken()) - 1;
                swap(first, second); // 순위 바꾸기
            }
    
            sb.append(topology()).append("\n");
        }

        System.out.println(sb.toString());
    }
    
    static String topology() {
        Queue<Integer> queue = new LinkedList<>();
        StringBuilder sb = new StringBuilder();
        int cnt = 0;
        for(int i=0; i < n; i++) {
            if(input[i] == 0) { // 1위면 넣기
                queue.offer(i);
                cnt++;
            }
        }
        if(queue.isEmpty()) return "IMPOSSIBLE"; // 1위가 없으면 말이 안 되는 순서인 것
        if(cnt > 1) return "?"; // 1위가 여러 명이면 정확한 순서 알 수 없음
        while(!queue.isEmpty()) {
            int cur = queue.poll();
            sb.append(cur + 1).append(" ");
            for(int j=0; j < order[cur].size(); j++) {
                int next = order[cur].get(j);
                if(--input[next] == 0) {
                    queue.offer(next);
                    cnt++;
                }
            }
        }
        if(cnt < n) return "IMPOSSIBLE"; // 끝까지 찾지 못 했어도 순서가 이상한 것
        return sb.toString();
    }
    
    static void swap(int from, int to) {
        if (rankingNum[from] < rankingNum[to]){ // 현재 to가 뒤쪽이면
            order[from].remove(Integer.valueOf(to)); // from 뒤쪽에서 to 빼기
            order[to].add(from); to 뒤쪽에 from 넣기
            input[from]++; // from 진입차수 증가
            input[to]--; // to 진입차수 감소
        } else {
            order[to].remove(Integer.valueOf(from));
            order[from].add(to);
            input[from]--;
            input[to]++;
        }
    }
}
